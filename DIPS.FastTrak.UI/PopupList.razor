@implements IPopupControl
@typeparam T

<div style="position: relative">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
    @if (Items != null && _isOpen)
    {
        <div class="PopupList @GetClass()" @attributes="Attributes">
            <Virtualize Items="Items">
                <button @onclick="async e => await HandleItemClick(context)">
                    @ItemTemplate(context)
                </button>
            </Virtualize>
            @Footer
        </div>
    }
</div>

@code {
    bool _isOpen;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? Footer { get; set; }

    [Parameter]
    public IList<T>? Items { get; set; }

    [Parameter]
    public RenderFragment<T> ItemTemplate { get; set; } = context => @<span>@context</span>;

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public EventCallback<T> OnSelect { get; set; }

    [Parameter]
    public PopupAnchor PopupAnchor { get; set; } = PopupAnchor.Top;

    #region Lifecycle methods

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _isOpen = IsOpen;
    }

    #endregion

    private string GetClass()
    {
        var css = "";
        switch (PopupAnchor)
        {
            case PopupAnchor.Right:
                css += "AnchorRight";
                break;
            case PopupAnchor.Top:
                css += "AnchorTop";
                break;
        }
        return css;
    }

    private async Task HandleItemClick(T item)
    {
        await OnSelect.InvokeAsync(item);
        await CloseAsync();
    }

    public bool GetIsOpen() => _isOpen;

    public async Task CloseAsync()
    {
        _isOpen = false;
        await UpdateOpen();
    }

    public async Task OpenAsync()
    {
        _isOpen = true;
        await UpdateOpen();
    }

    public async Task UpdateOpen()
    {
        await IsOpenChanged.InvokeAsync(_isOpen);
        await InvokeAsync(StateHasChanged);
    }
}