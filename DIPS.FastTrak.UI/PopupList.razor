@implements IPopupControl
@typeparam T

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>
@if (ItemsSource != null && _isOpen)
{
    <div class="PopupList" @attributes="Attributes">
        <Virtualize Items="ItemsSource">
            <button @onclick="HandleItemClick">
                @ItemTemplate(context)
            </button>
        </Virtualize>
        @Footer
    </div>
}

@code {
    bool _isOpen;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? Footer { get; set; }

    [Parameter]
    public IList<T>? ItemsSource { get; set; }

    [Parameter]
    public RenderFragment<T> ItemTemplate { get; set; } = context => @<span>@context</span>;

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _isOpen = IsOpen;
    }

    private async Task HandleItemClick() => await CloseAsync();

    public bool GetIsOpen() => _isOpen;

    public async Task CloseAsync()
    {
        _isOpen = false;
        await UpdateOpen();
    }

    public async Task OpenAsync()
    {
        _isOpen = true;
        await UpdateOpen();
    }

    public async Task UpdateOpen()
    {
        await IsOpenChanged.InvokeAsync(_isOpen);
        await InvokeAsync(StateHasChanged);
    }
}